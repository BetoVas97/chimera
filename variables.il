// Code generated by the chimera compiler.

.assembly 'chimera' {}

.assembly extern 'chimeralib' {}

.assembly extern System.Core{
  .ver 4:0:0:0 
 .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )
}
.class public 'ChimeraProgram' extends ['mscorlib']'System'.'Object' {
		.field private static int32 konstant
		.field private static int32 x
		.field private static int32 y

.method private static hidebysig specialname rtspecialname 
           default void '.cctor' ()  cil managed {
		ldc.i4 1
		stsfld int32 ChimeraProgram::konstant
		ldc.i4.0
		stsfld int32 ChimeraProgram::x
		ldc.i4.0
		stsfld int32 ChimeraProgram::y
		ret
	}
	.method public static hidebysig	default void F(bool b,int32 z) cil managed {
		.locals init(int32 'konstant')
		ldc.i4 1000
		stloc 'konstant'
		.locals init(int32 'x')
		ldc.i4.0
		stloc 'x'
		ldarg 0
		call void class ['chimeralib']'Chimera'.'Utils'::'WrBool'(bool)
		call void class ['chimeralib']'Chimera'.'Utils'::'WrLn'()
		ldarg 1
		call void class ['chimeralib']'Chimera'.'Utils'::'WrInt'(int32)
		call void class ['chimeralib']'Chimera'.'Utils'::'WrLn'()
		ldloc 'x'
		ldloc 'konstant'
		add
		stloc 'x'
		ldsfld int32 ChimeraProgram::y
		ldloc 'konstant'
		add
		stsfld int32 ChimeraProgram::y
		ldloc 'x'
		call void class ['chimeralib']'Chimera'.'Utils'::'WrInt'(int32)
		call void class ['chimeralib']'Chimera'.'Utils'::'WrLn'()
		ldsfld int32 ChimeraProgram::y
		call void class ['chimeralib']'Chimera'.'Utils'::'WrInt'(int32)
		call void class ['chimeralib']'Chimera'.'Utils'::'WrLn'()
		ret
	}
	.method public static hidebysig	default void G() cil managed {
		.locals init(int32 'y')
		ldc.i4.0
		stloc 'y'
		ldsfld int32 ChimeraProgram::x
		ldsfld int32 ChimeraProgram::konstant
		add
		stsfld int32 ChimeraProgram::x
		ldloc 'y'
		ldsfld int32 ChimeraProgram::konstant
		add
		stloc 'y'
		ldsfld int32 ChimeraProgram::x
		call void class ['chimeralib']'Chimera'.'Utils'::'WrInt'(int32)
		call void class ['chimeralib']'Chimera'.'Utils'::'WrLn'()
		ldloc 'y'
		call void class ['chimeralib']'Chimera'.'Utils'::'WrInt'(int32)
		call void class ['chimeralib']'Chimera'.'Utils'::'WrLn'()
		ldc.i4.0

		ldc.i4.5
		call void class ChimeraProgram::F(bool,int32)
		ret
	}

	.method public static void 'start'() {
		.entrypoint
		call void class ChimeraProgram::G()
		ret
	}
}
